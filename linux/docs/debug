+------------------------------------------------------------------------------+
| Refer to Linux-6.1.63                                                        |
+------------------------------------------------------------------------------+
- KGDB -

*-------------*                      *------------*
| remote host |_____ connection _____|   Target   |
|     GDB     |           |          |    KGDB    |
*-------------*           |          *------------*
                   serial/ethernet

--------------------------------------------------------------------------------
[1] Configuration to enable/disable kdb

# CONFIG_STRICT_KERNEL_RWX is not set
CONFIG_FRAME_POINTER=y
CONFIG_KGDB=y
CONFIG_KGDB_SERIAL_CONSOLE=y
CONFIG_KGDB_KDB=y
CONFIG_KDB_KEYBOARD=y
CONFIG_MAGIC_SYSRQ=y
CONFIG_MAGIC_SYSRQ_SERIAL=y
CONFIG_DEBUG_INFO=y
CONFIG_RANDOMIZE_BASE=n

[2] kgdboc (kgdb over console)

For kgdb/gdb, kgdboc is designed to work with a single serial port. The Kernel
command line option kgdbwait makes kgdb wait for a debugger connection during
booting of a kernel. The kgdbcon feature allows you to see printk() messages
inside gdb while gdb is connected to the kernel.

[3] kgdboe (kgdb over ethernet)

--------------------------------------------------------------------------------
On AArch64 Linux:

$ lkvm run -k Image -d rootfs.ext4 -c 6 -m 512 -n disk --debug \
           --console serial -p "kgdboc=ttyS1 kgdbwait kgdbcon" --tty 1

  Info: Assigned terminal 1 to pty /dev/pts/[X]
  ...

[Tip: kvmtool does not work so far]

$ qemu-system-aarch64 \
    -machine virt \
    -cpu cortex-a53 \
    -smp 2 \
    -m 1G \
    -kernel Image.gz \
    -drive format=raw,index=0,file=rootfs.ext4 \
    -nographic \
    -append "noinitrd root=/dev/vda console=ttyAMA0 init=/linuxrc nokaslr" \
    -S -gdb tcp::5050

[Tip: qemu works properly so far]

$ gdb vmlinux
(gdb) target remote :5050
(gdb) set debug-file-directory
(gdb) b [func]
(gdb) monitor ps
(gdb) i registers
(gdb) i all-registers
(gdb) i registers [reg]
(gdb) p $[reg]
(gdb) p/x $[reg]
(gdb) x $[reg]
(gdb) disassemble [func]
(gdb) bt
(gdb) c
(gdb) s
(gdb) l [func]

--------------------------------------------------------------------------------
Enter the kernel debugger manually or by waiting for an oops or fault.
CONFIG_MAGIC_SYSRQ=y.

$ echo g > /proc/sysrq-trigger
--------------------------------------------------------------------------------
- STRACE -

$ strace -yy -vv -tt -f -o trace {-p [pid]}/{execution}

--------------------------------------------------------------------------------
To debug a kernel, use objdump and look for the hex offset from the crash output
to find the valid line of code/assembler.

$ objdump -r -S -l -d *.o
@ -t => display static symbol table vs. -T dynamic symbol table
@ -d => disassemble
@ -S => intermix source code with disassembly
@ -r => relocation entries in the file

--------------------------------------------------------------------------------
- FTRACE -

CONFIG_HAVE_DYNAMIC_FTRACE=y
CONFIG_HAVE_DYNAMIC_FTRACE_WITH_REGS=y
CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y
CONFIG_FTRACE=y
CONFIG_DYNAMIC_FTRACE=y
CONFIG_DYNAMIC_FTRACE_WITH_REGS=y
CONFIG_FTRACE_SYSCALLS=y
CONFIG_FTRACE_MCOUNT_RECORD=y
CONFIG_FTRACE_MCOUNT_USE_PATCHABLE_FUNCTION_ENTRY=y

$ mount -t tracefs nodev /sys/kernel/tracing

@trace-cmd

$ trace-cmd list [option]

$ trace-cmd start -p <tracer> -P <pid> -e <event>

$ trace-cmd record -p <tracer> -P <pid> -e <event>

$ trace-cmd stop

$ trace-cmd clear

--------------------------------------------------------------------------------
- PERF -

(1) Compilation under [linux-source]/tools/perf

$ make ARCH=arm64 LDFLAGS="-static" CROSS_COMPILE=

$ perf top

--------------------------------------------------------------------------------
@ latency

- cyclictest

Cyclictest accurately and repeatedly measures the difference between a thread's
intended wake-up time and the time at which it actually wakes up in order to
provide statistics about the system's latencies. It can measure latencies in
real-time systems caused by the hardware, the firmware, and the operating
system.

$ cyclictest -p80 -i250 -a -t -m -d 0 -b 100 --tracemark

$ trace-cmd start -e sched_switch -e sched_waking -e timer -e irq \
    -e irq_vectors cyclictest -p80 -i250 -a -t -m -d 0 -b 100 --tracemark

$ trace-cmd export -o trace-cyclic.dat

$ trace-cmd report -i trace-cyclic.dat | tail -20

$ trace-cmd report -l --cpu 1 trace-cyclic.dat | tail -20

(1) HW Latency
    (a) system management interrupts (SMI)
    (b) clock frequency
    (c) cache line bouncing

- Hardware Latency Algorithm

CONFIG_HWLAT_TRACER

- Wakeup Latency

- IRQ and Preemption Latency

--------------------------------------------------------------------------------
