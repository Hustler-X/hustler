menu "Arm architecture configuration"


choice
    prompt "Execution state"
    default ARCH_ARMV8_AARCH64

config ARCH_ARMV8_AARCH64
    bool "Armv8 aarch64 execution state"
    help
        AArch64 is a 64-bit Execution state. It supports the A64 instruction set. The standard
        register width is 64 bits.

config ARCH_ARMV8_AARCH32
    bool "Armv8 aarch32 execution state"
    help
        AArch32 is a 32-bit Execution state. Operation in this state is backward compatible with
        previous architectures. It supports the T32 and A32 instruction sets. The standard register
        width is 32 bits.

endchoice

menu "Compiler configuration"

choice
	prompt "Toolchain selection"
	default ARM_GCC_SELECT

config ARM_GCC_SELECT
	bool "Gcc"

config ARM_CLANG_SELECT
	bool "Clang"

endchoice

config TOOLCHAIN_NAME
	string
	default "gcc" if ARM_GCC_SELECT
	default "clang" if ARM_CLANG_SELECT

config TARGET_ARMV8_AARCH32
    bool
    default y if ARCH_ARMV8_AARCH32

config TARGET_ARMV8_AARCH64
    bool
    default y if ARCH_ARMV8_AARCH64

config ARCH_EXECUTION_STATE
	string
	default "aarch32" if ARCH_ARMV8_AARCH32
	default "aarch64" if ARCH_ARMV8_AARCH64


# FPU config

if ARCH_ARMV8_AARCH32

menu "Fpu configuration"

choice
	prompt "mfpu config"
	default CRYPTO_NEON_FP_ARMV8
	help
		Used to specify the Floating Point Unit (FPU) used. This option allows you to optimize the floating-point code generated by the compiler by specifying a specific FPU type.

config CRYPTO_NEON_FP_ARMV8
	bool "crypto-neon-fp-armv8"
	help
		Enables the ARMv8 floating-point extension instructions, the cryptographic extension and the Advanced SIMD extension instructions.

config VFPV4
	bool "vfpv4"
	help
		Enables the VFPv4 floating-point extension instructions.

config VFPV4_D16
	bool "vfpv4-d16"
	help
        Enables VFPv4 floating-point extension instructions in the ARM architecture and limits the number of double-precision floating-point registers to 16.

config VFPV3
	bool "vfpv3"
	help
		Enables the VFPv3 floating-point extension instructions.

config VFPV3_D16
	bool "vfpv3-d16"
	help
        Enables VFPv3 floating-point extension instructions in the ARM architecture and limits the number of double-precision floating-point registers to 16.

endchoice

config ARM_MFPU
	string
	default "crypto-neon-fp-armv8"     if CRYPTO_NEON_FP_ARMV8
	default "vfpv4"                    if VFPV4
    default "vfpv4-d16"                if VFPV4_D16
    default "vfpv3"                    if VFPV3
    default "vfpv3-d16"                if VFPV3_D16

choice
	prompt "mfloat-abi config"
	default MFLOAT_ABI_HARD
	help
        The -mfloat-abi option configures the Application Binary Interface (ABI) of floating-point numbers and specifies the rules and conventions that processors and compilers should follow when working with floating-point numbers

config MFLOAT_ABI_HARD
	bool "hard"
	help
		Use hardware implementation of the floating-point ABI.

config MFLOAT_ABI_SOFTFP
	bool "softfp"
	help
		Use software implementation of the floating-point ABI.
endchoice

config ARM_MFLOAT_ABI
	string
	default "hard"     if MFLOAT_ABI_HARD
	default "softfp"   if MFLOAT_ABI_SOFTFP

endmenu

endif



if ARCH_ARMV8_AARCH64


config ARM_NEON
	bool "Advanced SIMD (NEON) Extension"
	default y

config ARM_CRC
    bool "Cyclic Redundancy Check (CRC) Extension"
    default y

config ARM_CRYPTO
    bool "Cryptographic (CRPTO) Extension"
    default y

config ARM_FLOAT_POINT
    bool "Float Point (FP)"
    default y

choice
	prompt "Code Model"
	default GCC_CODE_MODEL_SMALL
	help
		Select code model type for generation

config GCC_CODE_MODEL_TINY
	bool "Tiny"
	help
        Generate code for the tiny code model, symobls must be within 1MB of 
        each other

config GCC_CODE_MODEL_SMALL
	bool "Small"
	help
        Generate code for the small code model, symobls must be within 4GB of 
        each other

config GCC_CODE_MODEL_LARGE
    bool "Large"
    help
        Generate code for the large code model, no assumptions about addresses 
        and sizes of sections. Programs can be statically linked only

endchoice

endif


endmenu

config USE_CACHE
    bool
    prompt "Use cache"
    default n
    help
        Activate the MMU and TLB functions

    if USE_CACHE
        config USE_L3CACHE
            bool
            prompt "Use external l3 cache"
            depends on TARGET_FT2004 || TARGET_D2000
            default n
            help
                Include L3 Cache and enable

        config USE_MMU
            bool
            prompt "Use mmu"
            default n
            help
                Include platform mmu setting
    endif

if TARGET_ARMV8_AARCH32

config USE_AARCH64_L1_TO_AARCH32
    bool
    prompt "Use aarch64 l1 to aarch32 code"
    default y
    help
        Use the Aarch64 to Aarch32 mode function
endif


if TARGET_ARMV8_AARCH64

config BOOT_WITH_FLUSH_CACHE
    bool
    prompt "Flush cache when bootup"
    default y
    depends on USE_AARCH64_L1_TO_AARCH32 || TARGET_ARMV8_AARCH64
    help
        Enable Cache flush when bootup, basically used when bootloader load elf/bin without cache flush

endif

config MMU_DEBUG_PRINTS
    bool
    prompt "MMU debug"
    default y
    depends on TARGET_ARMV8_AARCH64
    help
        Enable MMU debug printing

endmenu
