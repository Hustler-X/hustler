----------------------------------------------------------------------
VIRTUALIZATION                                          2024/04/24 WED
----------------------------------------------------------------------
Popek and Goldberg virtualization requirements

Three properties of interest when analyzing the environment created by
a VMM (Virtual Machine Monitor)
(1) Equivalence
(2) Resource Control
(3) Effiency

Virtualization requirements
Popek and Goldberg introduce 3 different groups of instructions:
(1) Privileged instructions
    - trap if the processor is in user mode and do not trap if it is
      in system mode

(2) Control sensitive instructions
    - Attempt to change the configuration of resources in the system

(3) Behavior sensitive instructions
    - behavior or result depends on the configuration of resources

Theorem 1  For any conventional third-generation computer, a VMM may
be constructed if the set of sensitive instructions for that computer
is a subset of the set of privileged instructions.

Theorem 2  A conventional third-generation computer is recursively
virtualizable if it is virtualizable and a VMM without any timing
dependencies can be constructed for it.

----------------------------------------------------------------------
hypervisor => VMM

Type-1 hypervisors, a.k.a., native, bare-metal, hypervisors
                  (a) monolithic   - device drivers in hypervisor
                                     Complete monolithic  - xvisor
                                     Partially monolithic - KVM
                  (b) microkernel  - device drivers in parent guest
                                     parent guest => privileged VM
                                     child guests => non-privileged VMs

                                     +----------------+ +-------+
                                     | Privileged VM0 | |  VM1  | ...
                                     +----------------+ +-------+
                                     +-------------------------------+
                                     |          Hypervisor           |
                                     +-------------------------------+

Type-2 hypervisors, a.k.a., hosted hypervisors


Hypervisor Design

(1) Complete Monolithic (xvisor)

Complete monolithic hypervisor is a single software layer responsible
for host hardware access, CPU virtualization, and guest IO emulation.

(2) Partially Monolithic (kvmtool)

Partially monolithic hypervisors are usually an extension of general
purpose monolithic OS. They support host hardware access and CPU
virtualization in OS kernel and support guest IO emulation from user-
space software.

(3) Micro-kernelized (xen)

Micro-kernelized hypervisors are usually lightweight micro-kernels
providing basic host hardware access and CPU virtualization in
hypervisor micro-kernel. They depend on a management virtual machine
for full host hardware access, guest IO emulation, and rest of the
services.

----------------------------------------------------------------------
Components of VMM:

(1) Dispatcher
(2) Allocator
(3) Interpreter

Virtualization Mode

(1) Full Virtualization

Unmodified guest OSs are allowed to run as guest by providing system
virtual machines (i.e. emulating whole system resembling real hardware
for guest).

(2) Para Virtualization

Modified guest OSs are allowed to run as guest by providing hypercalls.
The hypercalls trigger a trap interrupt in the hypervisor, which
based on the hypercall parameters, causes the hypervisor to provide
the desired service to the guest.

(3) Hardware Assisted Virtualization

----------------------------------------------------------------------
Problematic Instructions

(1) undefine when execute on user mode
(2) no effect when execute on user mode
    MSR, MRS
(3) unpredictable behavior when execute on user mode
(4) ARM sensitive instructions
    CPSR

Software Solutions:

(a) Dynamic binary translation
    replace the problematic instructions with hypercalls

(b) Hypercall

----------------------------------------------------------------------
Hypercall Implementation

----------------------------------------------------------------------
Projects to learn:

(a) xvisor

    +-----------------+                            +--------+
    | Guest User space|                            |        |
    +-----------------+                            |        |
    |  Guest Kernel   |                            |        |
    |  +-----------+  |                            | Normal |
    |  |   VirtIO  |  | . . .                . . . | vCPUs  |
    |  | Frontends |  |                            |        |
    |  +-----------+  |                            |        |
    |     Guest 0     |                            |        |
    +-----------------+                            +--------+
    +-------------------------------------------------------+
    |  Guest IO          CPU          Management    VirtIO  |
    | Emulation     Virtualization     Terminal    Backends |
    |                                                       |
    | Device Drivers                                 Orphan |
    | (Host HW Access)         [Xvisor]               vCPUs |
    +-------------------------------------------------------+
    +-------------------------------------------------------+
    |                     Host Hardware                     |
    +-------------------------------------------------------+

Normal vCPU - A vCPU belonging to Guest/VM
Orphan vCPU - A vCPU belonging to hypervisor for background processing

(b) kvmtool

    +-------------------------------------------------------+
    |                   Host User Space                     |
    |                                          +----------+ |
    |                          KVMTOOL         | Guest US | |
    |                    (Guest IO Emulation   +----------+ |
    |                     + VirtIO Backends)   | Guest KS | |
    |                                          |  VirtIO  | |
    |                                          | Backends | |
    |                                          +----------+ |
    +-------------------------------------------------------+
    +-------------------------------------------------------+
    |  Device Drivers    Host Kernel        KVM Module      |
    | (Host HW Access)                 (CPU Virtualization) |
    +-------------------------------------------------------+
    +-------------------------------------------------------+
    |      KVM Module Low-Visor (Only for ARM/ARM64)        |
    +-------------------------------------------------------+
    +-------------------------------------------------------+
    |                     Host Hardware                     |
    +-------------------------------------------------------+

----------------------------------------------------------------------
CPU Virtualization




----------------------------------------------------------------------
Hypervisor Timer

A hypervisor will have to keep track of time elapsed with low overhead,
high precision and high resolution.


----------------------------------------------------------------------
Memory Management

The guest OS is responsible for programming stage 1 translation table
which carries out guest virtual address (GVA) to intermediate physical
address (IPA) translation. The ARM hypervisors are responsible for
programming stage 2 translation table to achieve intermediate physical
address (IPA) to actual physical address (PA) translation.

    +----------------------------+      +-------------+
    |           Guest            |      | Hypervisor  |
    |                +---------+ |      | +---------+ |
    | +------+  GVA  | Stage 1 | | IPA  | | Stage 2 | | PA
    | | vCPU |------▶|   MMU   |-------▶| |   MMU   |-------▶
    | +------+       +---------+ |      | +---------+ |
    +----------------------------+      +-------------+

----------------------------------------------------------------------
Hypervisor Scheduler

The hypervisor scheduler of Xvisor is generic and pluggable with respect
to the scheduling strategy (or scheduling algorithm)

Pluggable Scheduling Policy (soft real-time)

- Fixed Priority Round-Robin
- Fixed Priority Rate Monotonic

----------------------------------------------------------------------
Host Interrupts



----------------------------------------------------------------------
Guest IO Emulation

         +-------+                              +-------+
    SVC  | Guest |  Guest        Non-sleepable  | Guest |
    Mode | Code  |  IO Event        Context     | Code  |
         +-------+ /                   |        +-------+
    -----------------------------------|--------------------▶
                  +--------+ +-----------------+       (time)
    HYP           | Xvisor | | IO Emulation in |
    Mode          | Kernel | | Normal Context  |
                  +--------+ +-----------------+

----------------------------------------------------------------------
Device Virtualization

(1) Software Emulated Devices

(2) Paravirtual Devices (e.g., VirtIO Net, VirtIO Block)

(3) Pass-through Devices
    - Direct access of host device from Guest/VM

(4) Partial Pass-through Devices
    - Access part of a host device from Guest/VM

----------------------------------------------------------------------
VIRTIO










----------------------------------------------------------------------
